Name: Devam Shroff
UID: 504923307

1)
loading the assignment
  wget http://web.cs.ucla.edu/classes/spring18/cs35L/assign/coreutils-with-bug.tar.gz

extraction
  tar -zxvf coreutils-with-bug.tar.gz

  cd coreutils-with-bug.tar.gz
  ./configure
  make

make gives the following error:
  utimens.h:2:5: error: conflicting types for 'futimens'
  int futimens (int, char const *, struct timespec const [2]);
      ^
      In file included from utimecmp.h:25:0,
        from utimecmp.c:25:
        /usr/include/sys/stat.h:373:12: note: previous declaration
        of 'futimens' was here
      extern int futimens (int __fd, const struct timespec __times[2]) __THROW
                 ^

  download and apply the patch:
  wget http://web.cs.ucla.edu/classes/spring18/cs35L/assign/coreutils.diff

  patch -p0 < coreutils.diff

  make
  there were no bugs this time

tmp=$(mktemp -d)
cd $tmp
touch -d '1918-11-11 11:00 GMT' wwi-armistice
touch now
sleep 1
touch now1
~/35L/proj4/coreutils-with-bug/src/ls -lt --full-time wwi-armistice now now1
-rw-r--r-- 1 devam csugrad 0 1918-11-11 03:00:00.000000000 -0800 wwi-armistice
-rw-r--r-- 1 devam csugrad 0 2018-05-03 15:49:56.880749187 -0700 now1
-rw-r--r-- 1 devam csugrad 0 2018-05-03 15:49:42.123499376 -0700 now

problem is that  wwi-armistice should be the third item because it
happened before now and now1

2)
Fixing the problem
enter directory
  cd ~/35L/proj4/coreutils-with-bug/src
find ls
  ls ls
there should be a program where ls comes from
  ls ls.c
attempt to debug
  gdb ls.c
  info functions
the above returns nothing, so then I realized there must be an executable
  ls ls.o
sure enough, it was there
second attempt to debug
  gdb ls.o
  info programs
find the function where the bug probably is
static int compare_mtime(V, V);
attempt to look inside
  disas compare_mtime
this is just machine code, wont really help.

attempt to modify compare_mtime
exit GDB
  emacs ls.c
closer inspection of program shows that there a function timespec_cmp in
which the comparison of origin time happens. The function is

timespec_cmp (struct timespec a, struct timespec b)
{
    int diff = a.tv_sec - b.tv_sec;
    return diff ? diff : a.tv_nsec - b.tv_nsec;
}

As can be seen, there is high possibility of integer overflow if a.tv_sec
is small and b.tv_nsec is very high, resulting in a wrap-around which
causes the buggy behavior

therefore, we duplicate coreutils-with-bug to a file named
coreutils-with-bug-new and find timespec.h inside
coreutils-with-bug-new/lib
modify timespec.h:
  emacs timespec.h
made this change:
timespec_cmp (struct timespec a, struct timespec b)
{
if (a.tv_sec < b.tv_sec) { return -1; }
else if (b.tv_sec < a.tv_sec) { return 1; }
return 0;
}

get the diff:

diff -u coreutils-with-bug/lib/timespec.h coreutils-with-bug-new/lib/timespec.h
> lab4.diff

Recreating the bug in the home problem resulted in the file from created in
1918 to appear to be given the timestamp of 2045.

The output is 2045 because the SEASnet filesystem uses unsigned time
stamps (64 bit) while the local file system uses signed time stamps (32 bit).
Therefore, all timestamps before 1970 (when the "Unix epoch" happened)
gets get truncated to 32 bits , which is why the year 1918 becomes 2045,
because a the '-' is lost.
