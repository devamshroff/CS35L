
wget " h t t p : / / w e b . c s . u c l a . e d u / c l a s s e s / s p r i n g 1 8 / c s 3 5 L / a s s i g n / a s s i g n 1 . h t m l " -O a s s i g n . h t m l
cp a s s i g n 1 . h t m l SP e x e r 1 . h t m l
cp a s s i g n 1 . h t m l SP e x e r 2 . h t m l
cp a s s i g n 1 . h t m l SP e x e r 3 . h t m l

Exercise 1.1:
2. C-s h t m l 
3. C-s s c a v e n g e r  M-b
4. C-s s e l f - r e f e r e n t i a l Enter M-b
5. C-s a r r o w Enter M-b
6. C-e
7. C-a
8. The above have been done in a concise way
9. No
10. C-x C-c y

Exercise 1.2:
2. C-s < ! - - C-a C-k
3. C-s D C-a C-k
4. C-s < ! - - C-u M-;
5. C-s < ! - - C-u M-;
   C-s < ! - - C-a C-k
   C-s < ! - - C-u M-;
   
Exercise 1.3:
2. M-x q u e r y - r e p l a c e Enter A s s i g n m e n t 1 Enter A s s i g n m e n t 2 1 Enter y y q
3. M-x q u e r y - r e p l a c e Enter U T F - 8 <Enter> U S - A S C I I Enter y q
4. M-< C-M-s [ ^ [ : a s c i i : ] ] C-a C-k
5. M-< C-s </ol> C-o

Exercise 1.4:
1. cat exer2.html exer2.diff >exer4.html
2. e m a c s Enter C-x C-f e x e r 4 . h t m l
3. M-> C-space C-p M-w C-r </HTML> Enter C-y
4. M-> C-r <! C-r Enter C-space C-n C-n C-n M-w C-r s h o u l d SP o u t p u t SP n o t h i n g C-r C-e Enter C-y
   M-> C-r <! C-r C-r C-b C-space C-n M-w C-r n o t h i n g . C-r C-r M-f C-f C-y
   M-> C-r <! C-r C-r C-r C-b C-space C-n C-n C-n M-w C-r S u b m i t SP t h e C-a C-y Enter
   M-> C-r <! C-r C-r C-r C-r C-b C-space C-n M-w C-r H o m e w o r k : C-r C-e Enter C-y
   M-> C-r <! C-r C-r C-r C-r C-r C-b C-space C-n C-n C-n M-w C-r L a b o r a t o r y : Linux C-r C-e Enter C-y
5. C-s - - - SP e x e r 1 .
h t m l Enter C-a C-u 9 9 9 9 9 9 9 C-k
6. C-x u
7. < ! - - M-> - - ! > C-r - - - C-r M-x q u e r y - r e p l a c e Enter - - > Enter - SP - > Enter y y y y y y y q
8. M-< M-x r e p l a c e - s t r i n g Enter < o l > Enter < o L > Enter
   there were 7 occurences

Exercise 1.5:
1. M-x m a k e - d i r e c t o r y Enter j u n k 
2. M-x s h e l l Enter
   cd j u n k Enter C-x C-f h e l l o . c
3. M-x c o m p i l e Enter M-0 C-k g c c SP - o SP h e l l o SP h e l l o . c
4. C-x b h e l l o - o u t Enter y C-u M-! . / h e l l o Enter
5. C-SP M-> M-w C-x b k e y 1 . t x t Enter M-> C-y
#include <stdio.h>
int
main (void)
{
 char n = '\n', b = '\\', q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c char n = '%cn', b = '%c%c', q = '%c';%c char const *p = %c%\s%c;%c printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);%c return 0;%c}%c";
   printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);
   return 0;
}

Exercise 1.6:
1. e m a c s C-x C-b Enter
2. 2086752196688377920
3. i n t SP x ;
   i n t SP y ;
   ( s e t q SP x SP ( r a n d o m ) )
   ( s e t q SP y SP ( r a n d o m ) )
4. 117821934044757016
5. The output is given in octodecimal and hexadecimal
6. No, the are not truly random because it is not possible to generate truly random numbers as computers generate numbers from a finite range of values. The numbers generated by the lisp code is pseudo-random at best.
7. The probability of the product being wrong is nearly 100%. This is because when the product overflows, the answer is incorrect. As the products of integers (all bits, e.g 2,3,4,5) the number of bits would need to be extended. Because in Lisp, the random function generates a 62 bit integer between the most negative and most positive number, overflow alalmost surely happens.

  

